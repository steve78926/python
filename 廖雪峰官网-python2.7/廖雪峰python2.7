2016-11-15(周二)  上机操作:高级特性： 切片，迭代， 列表生成式 生成器
            上机操作：面向对象编程, 类和实例, 访问限制, 继承和多态, 获取对象信息

2016-11-16(周三):  上机操作：

    高阶函数: 既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数
    map/reduce:
    filter:
    sorted:
    返回函数: 高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。
        (闭包): 返回闭包时牢记的一点就是：返回函数不要引用任何循环变量，或者后续会发生变化的变量
    匿名函数lambda:
    装饰器:
    偏函数: 简单总结functools.partial的作用就是，把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单

2016-11-17(周四): 上机操作:
    模块
    使用模块: 包含sys.argv，它是命令行参数, __name__ == "__main__", 别名import ... as ...， 作用域
    安装第三方模块:  setuptools管理工具， 模块搜索路径：如果我们要添加自己的搜索目录，有两种方法， 一是直接修改sys.path，添加要搜索的目录
                    第二种方法是设置环境变量PYTHONPATH

    使用__future__: Python提供了__future__模块，把下一个新版本的特性导入到当前版本，于是我们就可以在当前版本中测试一些新版本的特性

    面向对象高级编程

    使用__slots__：但动态绑定允许我们在程序运行的过程中动态给class加上功能，这在静态语言中很难实现。
                    为了达到限制的目的，Python允许在定义class的时候，定义一个特殊的__slots__变量，来限制该class能添加的属性

    使用@property： @property，    @score.setter 不是@property.setter,   函数名都是def score()

    多重继承: Mixin  用"混入" 继承其他类, 来获得新的功能. 通过多重继承，一个子类就可以同时获得多个父类的所有功能。
                    只允许单一继承的语言（如Java）不能使用Mixin的设计。

    定制类: __str__, __repr__(), 直接显示变量调用的不是__str__()，而是__repr__(), 解决办法是 _repr__ = __str__. 暂时跳过

    使用元类, 暂时跳过

2016-11-21(周一):
    错误、调试和测试
    错误处理: try...except...finally... , |  可以有多个except来捕获不同类型的错误：| Python所有的错误都是从BaseException类派生的
              finally: 主要用于释放资源，如try 打开文件，finally关闭文件， try打开连接，finally关闭连接
              logging: 可用于记录异常
    抛出错误： raise  下面这句不太理解
                其实这种错误处理方式不但没病，而且相当常见。捕获错误目的只是记录一下，便于后续追踪。但是，由于当前函数不知道应该怎么处理该错误，所以，最恰当的方式是继续往上抛，让顶层调用者去处理。

    ============================
    调试: 第一种方法简单直接粗暴有效，就是用print()把可能有问题的变量打印出来看看：
    断言: 启动Python解释器时可以用-O参数来关闭assert：
    logging: 把print()替换为logging是第3种方式
    pdb: 这个方式似乎不执行，不能进入pdb. 第4种方式是启动Python的调试器pdb，让程序以单步方式运行，可以随时查看运行状态。我们先准备好程序：
    pdb.set_trace():  'module' object has no attribute 'set_trace'

    单元测试
    文档测试:
        Expected: 期待的， Got: 得到的
        **********************************************************************
File "C:\Python27\mydict.py", line 21, in __main__.Dict
Failed example:
    d2.empty
Expected:
    Traceback (most recent call last):
        ...
    AttributeError: 'Dict' object has no attribute 'empty'
Got:
    Traceback (most recent call last):
      File "C:\Python27\lib\doctest.py", line 1315, in __run
        compileflags, 1) in test.globs
      File "<doctest __main__.Dict[8]>", line 1, in <module>
        d2.empty
      File "C:\Python27\mydict.py", line 37, in __getattr__
        raise AttributeError(r"Dict object has no attribute '%s'" % key)
    AttributeError: Dict object has no attribute 'empty'

2016-11-21(周一晚):
    IO编程: 同步和异步的区别就在于是否等待IO执行的结果
        第一种是CPU等着，也就是程序暂停执行后续代码，等100M的数据在10秒后写入磁盘，再接着往下执行，这种模式称为同步IO；
        另一种方法是CPU不等待，只是告诉磁盘，“您老慢慢写，不着急，我接着干别的事去了”，于是，后续代码可以立刻接着执行，这种模式称为异步IO。
        回调模式
        轮询模式

    文件读写: 现代操作系统不允许普通的程序直接操作磁盘，所以，读写文件就是请求操作系统打开一个文件对象（通常称为文件描述符）

        读文件: 要以读文件的模式打开一个文件对象，使用Python内置的open()函数，传入文件名和标示符
        file-like Object:
        二进制文件: 前面讲的默认都是读取文本文件，并且是ASCII编码的文本文件。要读取二进制文件，比如图片、视频等等，用'rb'模式打开文件即可：
        字符编码: 要读取非ASCII编码的文本文件，就必须以二进制模式打开，再解码。比如GBK编码的文件： import codecs
        写文件: 写文件和读文件是一样的，唯一区别是调用open()函数时，传入标识符'w'或者'wb'表示写文本文件或写二进制文件：

    操作文件和目录: import os , os.name
        环境变量: os.environ, os.getenv('PATH')
        操作文件和目录:
                 os.path.abspath('.')
                 os.path.join('/Users/michael', 'testdir')
                 os.path.split('/Users/michael/testdir/file.txt')
                 os.mkdir('/Users/michael/testdir')
                 os.rmdir('/Users/michael/testdir')
                 os.path.splitext('/path/to/file.txt')
                 os.rename('test.txt', 'test.py')
                 os.remove('test.py')
                 这些合并、拆分路径的函数并不要求目录和文件要真实存在，它们只对字符串进行操作。
                 但是复制文件的函数居然在os模块中不存在！原因是复制文件并非由操作系统提供的系统调用
                 shutil模块提供了copyfile()的函数，你还可以在shutil模块中找到很多实用函数，它们可以看做是os模块的补充
                 要注意这些函数有的在os模块中，有的在os.path模块中。

    json: 序列化
        d = dict(name='Bob', age=20, score=88)， pickle.dumps(d)，||||  f = open('dump.txt', 'wb')，pickle.dump(d, f)
        d = dict(name='Bob', age=20, score=88)， json.dumps(d)， json.loads(json_str)

2016-11-22(周二):

    进程和线程
        多进程：os.getpid()
        multiprocessing: from multiprocessing import Process, p = Process(target=run_proc, args=('test',))
        Pool: from multiprocessing import Pool,  p.apply_async(long_time_task, args=(i,))
        进程间通信: from multiprocessing import Process, Queue,

    多线程: 我们前面提到了进程是由若干线程组成的，一个进程至少有一个线程。于线程是操作系统直接支持的执行单元
            由于任何进程默认就会启动一个线程，我们把该线程称为主线程
            Lock: 其次，由于可以存在多个锁，不同的线程持有不同的锁，并试图获取对方持有的锁时，可能会造成死锁，导致多个线程全部挂起，既不能执行，也无法结束，只能靠操作系统强制终止。
            多核CPU: 用C、C++或Java来改写相同的死循环，直接可以把全部核心跑满，4核就跑到400%，8核就跑到800%
                    因为Python的线程虽然是真正的线程，但解释器执行代码时，有一个GIL锁：Global Interpreter Lock，任何Python线程执行前，必须先获得GIL锁，然后，每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行。这个GIL全局锁实际上把所有线程的执行代码都给上了锁，所以，多线程在Python中只能交替执行，即使100个线程跑在100核CPU上，也只能用到1个核
                    Python虽然不能利用多线程实现多核任务，但可以通过多进程实现多核任务。多个Python进程有各自独立的GIL锁，互不影响

            ThreadLocal:  ThreadLocal最常用的地方就是为每个线程绑定一个数据库连接，HTTP请求，用户身份信息等，这样一个线程的所有调用到的处理函数都可以非常方便地访问这些资源。
            进程 vs. 线程:  多进程模式最大的优点就是稳定性高，因为一个子进程崩溃了，不会影响主进程和其他子进程.
                            多进程模式的缺点是创建进程的代价大，在Unix/Linux系统下，用fork调用还行，在Windows下创建进程开销巨大
                            多线程模式致命的缺点就是任何一个线程挂掉都可能直接造成整个进程崩溃，因为所有线程共享进程的内存
                            在Windows下，多线程的效率比多进程要高，所以微软的IIS服务器默认采用多线程模式

                线程切换:   无论是多进程还是多线程，只要数量一多，效率肯定上不去
                计算密集型 vs. IO密集型: 我们可以把任务分为计算密集型和IO密集型
                        要最高效地利用CPU，计算密集型任务同时进行的数量应当等于CPU的核心数
                        Python这样的脚本语言运行效率很低，完全不适合计算密集型任务。对于计算密集型任务，最好用C语言编写。
                        第二种任务的类型是IO密集型，涉及到网络、磁盘IO的任务都是IO密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待IO操作完成
                        IO密集型任务执行期间，99%的时间都花在IO上，花在CPU上的时间很少，因此，用运行速度极快的C语言替换用Python这样运行速度极低的脚本语言，完全无法提升运行效率

                异步IO: 现代操作系统对IO操作已经做了巨大的改进，最大的特点就是支持异步IO。如果充分利用操作系统提供的异步IO支持，就可以用单进程单线程模型来执行多任务，这种全新的模型称为事件驱动模型
                        对应到Python语言，单进程的异步编程模型称为协程

                分布式进程:  未看完,代码已经写完(周三)，

2016-11-24(周四):
    正则表达式： 进阶
                re模块：
                切分字符串：re.split(r'[\s\,\;\:]+', 'a,b, c; d; e:f:g')  如果用户输入了一组标签，下次记得用正则表达式来把不规范的输入转化成正确的数组。
                分组： m = re.match(r'^(\d{3,4})-(\d{3,8})$', '010-69367905'), m.group(0)是'010-69367905', m.group(1)是'010', m.group(2)是'69367905'  m.groups()是元组('010', '69367905')
                    注意到group(0)永远是原始字符串，group(1)、group(2)……表示第1、2、……个子串。
                    re.match(r'^([0,1]*[0-9]|2[0-3])\:([0-5]?[0-9])\:([0-5]?[0-9])$', '18:19:51')  匹配时间的正则

                贪婪匹配: 最后需要特别指出的是，正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符
                          re.match(r'^(\d+)(0*)$', '102300').groups()  结果：('1002300', '')
                          re.match(r'^(\d+?)(0*)$', '1002300').groups() 结果是: ('10023', '00')
                          用“非贪婪”操作符，“?”. 这个操作符可以用在 “*”, “+”, 或 “?” 的后面。它的作用是要求正则表达式引擎匹配的字符越少越好。

                编译: 如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配
                    re_telephone = re.compile(r'^(\d{3})-(\d{3,8})$')  编译后生成Regular Expression对象，由于该对象自己包含了正则表达式，所以调用对应的方法时不用给出正则字符串。
                    re_telephone.match('010-12345').groups()    注意：这里没有表达式，只有字符串

                作业：请尝试写一个验证Email地址的正则表达式。版本一应该可以验证出类似的Email：

                re.match('(\w+)+\@\w+(\.\w+)+$', '280864129@qq.ac.ucas.cn')   不能识别 -

    常用内建模块:
        collections:
            namedtuple:  namedtuple是一个函数，它用来创建一个自定义的tuple对象，并且规定了tuple元素的个数，并可以用属性而不是索引来引用tuple的某个元素。
                         Circle = namedtuple('Circle', ['x', 'y', 'r'])
            deque: 使用list存储数据时，按索引访问元素很快，但是插入和删除元素就很慢了，因为list是线性存储，数据量大的时候，插入和删除效率很低。
                    deque是为了高效实现插入和删除操作的双向列表，适合用于队列和栈：

            defaultdict: 使用dict时，如果引用的Key不存在，就会抛出KeyError。如果希望key不存在时，返回一个默认值，就可以用defaultdict：
                         注意默认值是调用函数返回的，而函数在创建defaultdict对象时传入
                         除了在Key不存在时返回默认值，defaultdict的其他行为跟dict是完全一样的。
            OrderedDict: 使用dict时，Key是无序的。在对dict做迭代时，我们无法确定Key的顺序。如果要保持Key的顺序，可以用OrderedDict：
                         注意，OrderedDict的Key会按照插入的顺序排列，不是Key本身排序：

            Counter:  Counter是一个简单的计数器，例如，统计字符出现的个数：

    base64:  Base64是一种用64个字符来表示任意二进制数据的方法。Base64适用于小段内容的编码，比如数字证书签名、Cookie的内容等。
    struct:  Python提供了一个struct模块来解决str和其他二进制数据类型的转换。
             import struct
             struct.pack('>I', 10240099)    pack的第一个参数是处理指令，'>I'的意思是：>表示字节顺序是big-endian，也就是网络序，I表示4字节无符号整数。
             struct.unpack('>IH', '\xf0\xf0\xf0\xf0\x80\x80')   根据>IH的说明，后面的str依次变为I：4字节无符号整数和H：2字节无符号整数。
              struct.unpack('<ccIIIIIIHH', s)      cc表示头两个字节为char(字符) 后面IIIIII 表示6个4字节无符号整数，HH 2字节无符号整数。

    hashlib:
        摘要算法简介
        摘要算法应用

    itertools:
        chain()
        groupby()
        imap(): r = map(lambda x: x*x, itertools.count(1)) 这个命令能让系统死机 由于map()返回的是一个list，所以当用它去处理无限序列的时候，它会尝试计算完之后才返回，但是序列是无限的，所以它会一直计算下去，致使其占用的系统的内存越来越高。
        ifilter()

    XML: DOM vs SAX

    HTMLParser: 源模块： Lib\xml\HTMLParser.py
        未练习

2016-12-6  周二

   常用第三方模块： 所有的第三方模块都会在PyPI - the Python Package Index上注册

   PIL： 由于windows下的PIL-1.1.7.win32-py2.7.exe 无法安装，暂时先搁置

   图形界面：

   网络编程:  更确切地说，网络通信是两台计算机上的两个进程之间的通信

   TCP/IP简介: 一个进程也可能同时与多个计算机建立链接，因此它会申请很多端口

   TCP编程:
        注意参数是一个tuple，包含地址和端口号。
        请注意，小于1024的端口号必须要有管理员权限才能绑定：

2016-12-7 周三:
    电子邮件：
    SMTP发送邮件：注意不能简单地传入name <addr@example.com>，因为如果包含中文，需要通过Header对象进行编码。
            发送HTML邮件:
            发送附件:
            发送图片:
            加密SMTP:
            小结: 使用Python的smtplib发送邮件十分简单，只要掌握了各种邮件类型的构造方法，正确设置好邮件头，就可以顺利发出

    POP3收取邮件:
        收取邮件分两步：
            第一步：用poplib把邮件的原始文本下载到本地；
            第二部：用email解析原始文本，还原为邮件对象。


2016-12-8 周四:
    访问数据库:
    使用SQLite: SQLite是一种嵌入式数据库，它的数据库就是一个文件。由于SQLite本身是C写的，而且体积很小，所以，经常被集成到各种应用程序中，甚至在iOS和Android的App中都可以集成。Python就内置了SQLite3

    使用MySQL: 目前，有两个MySQL驱动：
            mysql-connector-python：是MySQL官方的纯Python驱动；
            MySQL-python：是封装了MySQL C驱动的Python驱动

            安装ez_setup, pip,  mysql-connector-python驱动(centos6.5 and windows)  MySQL-python驱动(centos6.5 and windows)

2016-12-12 周一:
    使用SQLAlchemy:
       mysqlconnector驱动: engine = create_engine('mysql+mysqlconnector://salt:123456@192.168.152.132:3306/test')  #'
       MySQLdb驱动: engine = create_engine('mysql:mysqldb://salt:123456@192.168.152.132:3306/test')


























